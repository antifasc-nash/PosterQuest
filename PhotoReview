import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Flag, Eye, X } from "lucide-react";
import { format } from "date-fns";

export default function PhotoReview() {
  const [selectedLog, setSelectedLog] = useState(null);
  const queryClient = useQueryClient();

  const { data: posterLogs = [] } = useQuery({
    queryKey: ['allPosterLogs'],
    queryFn: () => base44.entities.PosterLog.list('-created_date'),
    initialData: [],
  });

  const flagMutation = useMutation({
    mutationFn: ({ logId, flagged }) => base44.entities.PosterLog.update(logId, { flagged }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['allPosterLogs'] });
    },
  });

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Photo Review</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {posterLogs.map((log) => (
              <Card key={log.id} className={log.flagged ? 'border-red-500 border-2' : ''}>
                <CardContent className="p-4">
                  <div className="relative mb-3">
                    <img
                      src={log.photo_url}
                      alt="Poster"
                      className="w-full h-48 object-cover rounded-lg cursor-pointer"
                      onClick={() => setSelectedLog(log)}
                    />
                    {log.flagged && (
                      <Badge className="absolute top-2 right-2 bg-red-600">
                        <Flag className="w-3 h-3 mr-1" />
                        Flagged
                      </Badge>
                    )}
                  </div>
                  <div className="space-y-1 text-sm">
                    <div className="font-semibold">{log.user_name}</div>
                    <div className="text-gray-600">{log.location_address}</div>
                    <div className="text-gray-500 text-xs">
                      {format(new Date(log.created_date), "MMM d, yyyy h:mm a")}
                    </div>
                    <div className="flex gap-2 mt-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => setSelectedLog(log)}
                      >
                        <Eye className="w-3 h-3 mr-1" />
                        View
                      </Button>
                      <Button
                        size="sm"
                        variant={log.flagged ? "default" : "outline"}
                        onClick={() => flagMutation.mutate({ logId: log.id, flagged: !log.flagged })}
                      >
                        <Flag className="w-3 h-3 mr-1" />
                        {log.flagged ? 'Unflag' : 'Flag'}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {selectedLog && (
        <Dialog open={!!selectedLog} onOpenChange={() => setSelectedLog(null)}>
          <DialogContent className="max-w-3xl">
            <div className="space-y-4">
              <img
                src={selectedLog.photo_url}
                alt="Poster"
                className="w-full h-96 object-contain rounded-lg"
              />
              <div className="space-y-2">
                <div><span className="font-semibold">User:</span> {selectedLog.user_name} ({selectedLog.user_email})</div>
                <div><span className="font-semibold">Location:</span> {selectedLog.location_address}</div>
                <div><span className="font-semibold">Points Earned:</span> {selectedLog.points_earned} ({selectedLog.multiplier}x multiplier)</div>
                <div><span className="font-semibold">Date:</span> {format(new Date(selectedLog.created_date), "MMMM d, yyyy h:mm a")}</div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
